///////////////////////////////////////////////////////////////
// val length : 'a array -> int
// [Array.length a n] Return the length (number of elements) 
// of the given array.
///////////////////////////////////////////////////////////////
function ML_array.length 0 
	push argument 0
	call Memory.peek 1
	return
///////////////////////////////////////////////////////////////
// val get : 'a array -> int -> 'a
// [Array.get a n] returns the element number n of array a. 
// The first element has number 0. The last element has number 
// Array.length a - 1. 
//You can also write a.(n) instead of Array.get a n.
///////////////////////////////////////////////////////////////
function ML_array.get 0
	push argument 0
	push argument 1
	add
	push constant 1
	add
	call Memory.peek 1
	return
///////////////////////////////////////////////////////////////
// val set : 'a array -> int -> 'a -> unit
// [Array.set a n x] modifies array a in place, replacing 
// element number n with x. 
// You can also write a.(n) <- x instead of Array.set a n x.
///////////////////////////////////////////////////////////////
function ML_array.set 0
	push argument 0
	push argument 1
	add
	push constant 1
	add
	push argument 2
	call Memory.poke 2
	push constant 0
	return
///////////////////////////////////////////////////////////////
// val create_uninitialized : int -> 'a array
// [Array.create_uninitialized n] returns a new Array of length n. 
// The Array is uninitialized and contains arbitrary values.
///////////////////////////////////////////////////////////////
function ML_array.create_uninitialized 1
	push argument 0
	push constant 1
	add
	call Memory.alloc 1
    pop local 0
    push local 0
    push argument 0
    call Memory.poke 2
    push local 0
	return 
///////////////////////////////////////////////////////////////
// val make : int -> 'a -> 'a array
// [Array.make n x] returns a fresh array of length n, initialized with x. 
// All the elements of this new array are initially physically equal to x
// (in the sense of the == predicate). Consequently, if x is mutable, 
// it is shared among all elements of the array, and modifying x through 
// one of the array entries will modify all other entries at the same time.
///////////////////////////////////////////////////////////////
function ML_array.make 2
	push argument 0
	call ML_array.create_uninitialized 1
	pop local 0
	push constant 0
	pop local 1
label L1
	push argument 0
	push local 1
	gt
	not // ie. '<='
	if-goto L2
	push local 0
	push local 1
	push argument 1
	call ML_array.set 3
	pop temp 0
	push local 1
	push constant 1
	add 
	pop local 1
	goto L1
label L2
	push local 0
	return