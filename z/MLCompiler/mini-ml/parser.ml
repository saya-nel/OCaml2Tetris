type token =
  | LAM
  | LET
  | REC
  | IN
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | IDENT of (string)
  | INT of (int)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | AND
  | OR
  | EQ
  | NEQ
  | GT
  | LT
  | GE
  | LE
  | NOT
  | TRUE
  | FALSE
  | EOF
  | TERMINAISON
  | LEFT_ARROW
  | LPAREN
  | RPAREN

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Parseutils
  open Ast
  let pos () = 
    make_position (Parsing.symbol_start_pos ()) (Parsing.symbol_end_pos ())
  
  let lam = List.fold_right (fun x e -> Lam(x,e))

# 46 "parser.ml"
let yytransl_const = [|
  257 (* LAM *);
  258 (* LET *);
  259 (* REC *);
  260 (* IN *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* WHILE *);
  265 (* DO *);
  266 (* DONE *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIV *);
  273 (* AND *);
  274 (* OR *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* GT *);
  278 (* LT *);
  279 (* GE *);
  280 (* LE *);
  281 (* NOT *);
  282 (* TRUE *);
  283 (* FALSE *);
    0 (* EOF *);
  284 (* TERMINAISON *);
  285 (* LEFT_ARROW *);
  286 (* LPAREN *);
  287 (* RPAREN *);
    0|]

let yytransl_block = [|
  267 (* IDENT *);
  268 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\003\000\003\000\002\000\002\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\000\000"

let yylen = "\002\000\
\001\000\002\000\006\000\007\000\000\000\002\000\002\000\001\000\
\005\000\007\000\008\000\006\000\005\000\002\000\003\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\001\000\000\000\018\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\017\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\007\000\004\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\034\000\035\000\012\000\036\000"

let yysindex = "\255\255\
\007\000\000\000\003\255\000\000\007\000\000\000\247\254\250\254\
\000\000\250\254\250\254\246\254\002\255\000\000\181\255\181\255\
\011\255\015\255\181\255\181\255\000\000\000\000\181\255\066\000\
\000\000\066\000\250\254\012\255\250\254\113\255\125\255\075\255\
\017\255\000\000\181\255\000\000\000\000\252\254\250\254\008\255\
\181\255\181\255\000\000\019\255\250\254\181\255\013\255\181\255\
\137\255\149\255\250\254\016\255\181\255\181\255\161\255\181\255\
\000\000\020\255\181\255\173\255\181\255\181\255\181\255\045\000\
\181\255\035\255\058\000\035\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\255\
\000\000\022\255\240\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\255\000\000\022\255\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\022\255\000\000\
\000\000\000\000\000\000\000\000\022\255\000\000\000\000\000\000\
\000\000\000\000\022\255\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\000\000\001\000\000\000\010\000"

let yygindex = "\000\000\
\003\000\252\255\071\000\048\000"

let yytablesize = 352
let yytable = "\001\000\
\010\000\010\000\005\000\006\000\011\000\007\000\004\000\009\000\
\015\000\011\000\024\000\026\000\005\000\008\000\030\000\031\000\
\014\000\028\000\032\000\044\000\016\000\027\000\039\000\009\000\
\046\000\029\000\048\000\045\000\037\000\051\000\000\000\054\000\
\012\000\005\000\059\000\017\000\049\000\050\000\063\000\019\000\
\005\000\053\000\020\000\055\000\004\000\021\000\022\000\000\000\
\000\000\060\000\000\000\062\000\000\000\000\000\064\000\000\000\
\066\000\004\000\067\000\000\000\068\000\000\000\025\000\025\000\
\023\000\004\000\025\000\025\000\000\000\037\000\025\000\000\000\
\000\000\000\000\000\000\017\000\018\000\000\000\000\000\019\000\
\013\000\014\000\020\000\000\000\000\000\021\000\022\000\000\000\
\025\000\025\000\000\000\000\000\000\000\025\000\000\000\025\000\
\000\000\038\000\000\000\040\000\000\000\025\000\000\000\025\000\
\023\000\043\000\025\000\000\000\025\000\047\000\025\000\000\000\
\025\000\017\000\018\000\052\000\000\000\019\000\041\000\000\000\
\020\000\058\000\000\000\021\000\022\000\017\000\018\000\000\000\
\000\000\019\000\000\000\000\000\020\000\042\000\000\000\021\000\
\022\000\017\000\018\000\000\000\000\000\019\000\023\000\056\000\
\020\000\000\000\000\000\021\000\022\000\017\000\018\000\000\000\
\000\000\019\000\023\000\000\000\020\000\000\000\057\000\021\000\
\022\000\017\000\018\000\000\000\061\000\019\000\023\000\000\000\
\020\000\000\000\000\000\021\000\022\000\017\000\018\000\000\000\
\065\000\019\000\023\000\000\000\020\000\017\000\018\000\021\000\
\022\000\019\000\000\000\000\000\020\000\000\000\023\000\021\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\010\000\000\000\010\000\010\000\
\003\000\010\000\010\000\011\000\000\000\011\000\000\000\011\000\
\011\000\000\000\011\000\011\000\014\000\000\000\014\000\014\000\
\000\000\014\000\014\000\009\000\010\000\009\000\009\000\010\000\
\009\000\009\000\005\000\000\000\012\000\011\000\012\000\012\000\
\011\000\012\000\012\000\000\000\014\000\017\000\033\000\014\000\
\061\000\019\000\000\000\009\000\020\000\000\000\009\000\021\000\
\022\000\000\000\017\000\033\000\012\000\065\000\019\000\012\000\
\000\000\020\000\017\000\033\000\021\000\022\000\019\000\000\000\
\005\000\020\000\023\000\000\000\021\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\005\000\000\000\023\000"

let yycheck = "\001\000\
\000\000\011\001\019\001\001\000\011\001\003\001\000\000\005\000\
\019\001\000\000\015\000\016\000\029\001\011\001\019\000\020\000\
\000\000\003\001\023\000\003\001\019\001\011\001\011\001\000\000\
\029\001\011\001\019\001\011\001\026\000\011\001\255\255\019\001\
\000\000\029\001\019\001\001\001\041\000\042\000\019\001\005\001\
\019\001\046\000\008\001\048\000\000\000\011\001\012\001\255\255\
\255\255\054\000\255\255\056\000\255\255\255\255\059\000\255\255\
\061\000\000\000\063\000\255\255\065\000\255\255\015\000\016\000\
\030\001\000\000\019\000\020\000\255\255\067\000\023\000\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\255\255\005\001\
\010\000\011\000\008\001\255\255\255\255\011\001\012\001\255\255\
\041\000\042\000\255\255\255\255\255\255\046\000\255\255\048\000\
\255\255\027\000\255\255\029\000\255\255\054\000\255\255\056\000\
\030\001\031\001\059\000\255\255\061\000\039\000\063\000\255\255\
\065\000\001\001\002\001\045\000\255\255\005\001\006\001\255\255\
\008\001\051\000\255\255\011\001\012\001\001\001\002\001\255\255\
\255\255\005\001\255\255\255\255\008\001\009\001\255\255\011\001\
\012\001\001\001\002\001\255\255\255\255\005\001\030\001\007\001\
\008\001\255\255\255\255\011\001\012\001\001\001\002\001\255\255\
\255\255\005\001\030\001\255\255\008\001\255\255\010\001\011\001\
\012\001\001\001\002\001\255\255\004\001\005\001\030\001\255\255\
\008\001\255\255\255\255\011\001\012\001\001\001\002\001\255\255\
\004\001\005\001\030\001\255\255\008\001\001\001\002\001\011\001\
\012\001\005\001\255\255\255\255\008\001\255\255\030\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\255\255\006\001\007\001\
\002\001\009\001\010\001\002\001\255\255\004\001\255\255\006\001\
\007\001\255\255\009\001\010\001\004\001\255\255\006\001\007\001\
\255\255\009\001\010\001\004\001\028\001\006\001\007\001\031\001\
\009\001\010\001\028\001\255\255\004\001\028\001\006\001\007\001\
\031\001\009\001\010\001\255\255\028\001\001\001\002\001\031\001\
\004\001\005\001\255\255\028\001\008\001\255\255\031\001\011\001\
\012\001\255\255\001\001\002\001\028\001\004\001\005\001\031\001\
\255\255\008\001\001\001\002\001\011\001\012\001\005\001\255\255\
\028\001\008\001\030\001\255\255\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\255\255\028\001\255\255\030\001"

let yynames_const = "\
  LAM\000\
  LET\000\
  REC\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  AND\000\
  OR\000\
  EQ\000\
  NEQ\000\
  GT\000\
  LT\000\
  GE\000\
  LE\000\
  NOT\000\
  TRUE\000\
  FALSE\000\
  EOF\000\
  TERMINAISON\000\
  LEFT_ARROW\000\
  LPAREN\000\
  RPAREN\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                                        ( [] )
# 271 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.prog) in
    Obj.repr(
# 45 "parser.mly"
                                        ( _2 )
# 278 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'idents) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.prog) in
    Obj.repr(
# 46 "parser.mly"
                                        ( (_2,(lam _3 _5))::_6 )
# 288 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'idents) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ast.prog) in
    Obj.repr(
# 47 "parser.mly"
                                        ( (_3,(lam _4 _6))::_7 )
# 298 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
               ( [] )
# 304 "parser.ml"
               : 'idents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'idents) in
    Obj.repr(
# 52 "parser.mly"
               ( _1::_2 )
# 312 "parser.ml"
               : 'idents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 56 "parser.mly"
                                        ( App(_1,_2) )
# 320 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 57 "parser.mly"
                                        ( _1 )
# 327 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'idents) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 61 "parser.mly"
                                        ( Lam(_2,(lam _3 _5)) )
# 336 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'idents) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 62 "parser.mly"
                                        ( Let((_2,(lam _3 _5)),_7) )
# 346 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'idents) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 63 "parser.mly"
                                        ( Rec((_3,(lam _4 _6)),_8) )
# 356 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 64 "parser.mly"
                                        ( If(_2,_4,_6) )
# 365 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    Obj.repr(
# 65 "parser.mly"
                                        ( While(_2,_4) )
# 373 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 66 "parser.mly"
                                        ( App(_1,_2) )
# 381 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    Obj.repr(
# 67 "parser.mly"
                                        ( _2 )
# 388 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                                        ( Var(_1) )
# 395 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "parser.mly"
                                        ( Val(_1) )
# 402 "parser.ml"
               : 'exp))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
